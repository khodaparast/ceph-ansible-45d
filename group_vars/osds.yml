---
# Variables here are applicable to all host groups NOT roles

# This sample file generated by generate_group_vars_sample.sh

# Dummy variable to avoid error because ansible does not recognize the
# file as a good configuration file when no variable in it.
dummy:

###########
# GENERAL #
###########

# Even though OSD nodes should not have the admin key
# at their disposal, some people might want to have it
# distributed on OSD nodes. Setting 'copy_admin_key' to 'true'
# will copy the admin key to the /etc/ceph/ directory
copy_admin_key: true


##############
# CEPH OPTIONS
##############

# Devices to be used as OSDs
# You can pre-provision disks that are not present yet.
# Ansible will just skip them. Newly added disk will be
# automatically configured during the next run.
#


# Declare devices to be used as OSDs
# All scenario(except 3rd) inherit from the following device declaration
# Note: This scenario uses the ceph-disk tool to provision OSDs

#devices:
#  - /dev/sdb
#  - /dev/sdk
#  - /dev/sdd
#  - /dev/sde

#devices: []


#'osd_auto_discovery'  mode prevents you from filling out the 'devices' variable above.
# Device discovery is based on the Ansible fact 'ansible_devices'
# which reports all the devices on a system. If chosen all the disks
# found will be passed to ceph-disk. You should not be worried on using
# this option since ceph-disk has a built-in check which looks for empty devices.
# Thus devices with existing partition tables will not be used.
#
osd_auto_discovery: true

chassis_size: 45

hybrid_chassis: false

# Encrypt your OSD device using dmcrypt
# If set to True, no matter which osd_objecstore you use the data will be encrypted
#dmcrypt: False

# Bluestore: Each dictionary must contain at least data. When defining wal or
# db, it must have both the lv name and vg group (db and wal are not required).
# This allows for four combinations: just data, data and wal, data and wal and
# db, data and db.
# For example:
# lvm_volumes:
#   - data: data-lv1
#     data_vg: vg1
#     wal: wal-lv1
#     wal_vg: vg1
#     crush_device_class: foo
#   - data: data-lv2
#     db: db-lv2
#     db_vg: vg2
#   - data: data-lv3
#     wal: wal-lv1
#     wal_vg: vg3
#     db: db-lv3
#     db_vg: vg3
#   - data: data-lv4
#     data_vg: vg4
#   - data: /dev/sda
#   - data: /dev/sdb1

lvm_volumes:
  - data: /dev/sda
  - data: /dev/sdb
  - data: /dev/sdc
  - data: /dev/sdd
  - data: /dev/sde
  - data: /dev/sdf
  - data: /dev/sdg
  - data: /dev/sdh
  - data: /dev/sdi
  - data: /dev/sdj
  - data: /dev/sdk
  - data: /dev/sdl
  - data: /dev/sdm
  - data: /dev/sdn
  - data: /dev/sdo
#  - data: /dev/2-1
#  - data: /dev/2-2
#  - data: /dev/2-3
#  - data: /dev/2-4
#  - data: /dev/2-5
#  - data: /dev/2-6
#  - data: /dev/2-7
#  - data: /dev/2-8
#  - data: /dev/2-9
#  - data: /dev/2-10
#  - data: /dev/2-11
#  - data: /dev/2-12
#  - data: /dev/2-13
#  - data: /dev/2-14
#  - data: /dev/2-15
#  - data: /dev/3-1
#  - data: /dev/3-2
#  - data: /dev/3-3
#  - data: /dev/3-4
#  - data: /dev/3-5
#  - data: /dev/3-6
#  - data: /dev/3-7
#  - data: /dev/3-8
#  - data: /dev/3-9
#  - data: /dev/3-10
#  - data: /dev/3-11
#  - data: /dev/3-12
#  - data: /dev/3-13
#  - data: /dev/3-14
#  - data: /dev/3-15
#  - data: /dev/4-1
#  - data: /dev/4-2
#  - data: /dev/4-3
#  - data: /dev/4-4
#  - data: /dev/4-5
#  - data: /dev/4-6
#  - data: /dev/4-7
#  - data: /dev/4-8
#  - data: /dev/4-9
#  - data: /dev/4-10
#  - data: /dev/4-11
#  - data: /dev/4-12
#  - data: /dev/4-13
#  - data: /dev/4-14
#  - data: /dev/4-15

#crush_device_class: ""
#osds_per_device: 1

device_crush_ssd_rule:
  name: replicated_ssd
  root: default
  type: host
  device: ssd
  default: false

device_crush_hdd_rule:
  name: replicated_hdd
  root: default
  type: host
  device: hdd
  default: true

device_crush_rules:
  - "{{ device_crush_hdd_rule }}"
  - "{{ device_crush_ssd_rule }}"

##########
# DOCKER #
##########

#ceph_config_keys: [] # DON'T TOUCH ME

# Resource limitation
# For the whole list of limits you can apply see: docs.docker.com/engine/admin/resource_constraints
# Default values are based from: https://access.redhat.com/documentation/en-us/red_hat_ceph_storage/2/html/red_hat_ceph_storage_hardware_guide/minimum_recommendations
# These options can be passed using the 'ceph_osd_docker_extra_env' variable.
#ceph_osd_docker_memory_limit: "{{ ansible_memtotal_mb }}m"
#ceph_osd_docker_cpu_limit: 4

# The next two variables are undefined, and thus, unused by default.
# If `lscpu | grep NUMA` returned the following:
#  NUMA node0 CPU(s):     0,2,4,6,8,10,12,14,16
#  NUMA node1 CPU(s):     1,3,5,7,9,11,13,15,17
# then, the following would run the OSD on the first NUMA node only.
#ceph_osd_docker_cpuset_cpus: "0,2,4,6,8,10,12,14,16"
#ceph_osd_docker_cpuset_mems: "0"

# PREPARE DEVICE
#
# WARNING /!\ DMCRYPT scenario ONLY works with Docker version 1.12.5 and above
#
#ceph_osd_docker_devices: "{{ devices }}"
#ceph_osd_docker_prepare_env: -e OSD_JOURNAL_SIZE={{ journal_size }}

# ACTIVATE DEVICE
#
#ceph_osd_docker_extra_env:
#ceph_osd_docker_run_script_path: "/usr/share" # script called by systemd to run the docker command
#ceph_osd_numactl_opts: ""

###########
# SYSTEMD #
###########

# ceph_osd_systemd_overrides will override the systemd settings
# for the ceph-osd services.
# For example,to set "PrivateDevices=false" you can specify:
#ceph_osd_systemd_overrides:
#  Service:
#    PrivateDevices: False


###########
#  CHECK  #
###########

#nb_retry_wait_osd_up: 60
#delay_wait_osd_up: 10
